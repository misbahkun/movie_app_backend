# GitLab CI Configuration for Branch Workflow
# File: .gitlab-ci.yml (letakkan di root repository)

# Use Node.js 22 image
image: node:22

# Define pipeline stages
stages:
  - test
  - build

# Cache node_modules untuk speed up builds
cache:
  paths:
    - node_modules/

# Variables
variables:
  NODE_ENV: test

# Run tests on merge requests and dev/test branch
test_job:
  stage: test
  variables:
    NODE_ENV: test
    JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
  before_script:
    - echo "Installing dependencies..."
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Environment variables:"
    - echo "Running tests..."
    - npm test
  artifacts:
    paths:
      - coverage/
    expire_in: 1 week
    when: always
  cache:
    paths:
      - .npm/
      - node_modules/
  only:
    - merge_requests

# Build job (only runs on main branch after merge)
build_and_deploy:
  stage: build
  variables:
    NODE_ENV: production
    NODE_VERSION: '22'
  before_script:
    - echo "Installing dependencies..."
    - npm ci --cache .npm --prefer-offline
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install -y openssh-client )'
    - eval "$(ssh-agent -s)"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -p "${SSH_PORT}" "$VPS_HOST" >> ~/.ssh/known_hosts || true
    - chmod 644 ~/.ssh/known_hosts
    # Sanity check: pastikan bisa auth pakai key
    - ssh -p "${SSH_PORT}" -o BatchMode=yes -o PreferredAuthentications=publickey -T "$VPS_USER@$VPS_HOST" "echo OK \$(hostname)"
  script:
    - echo "Building application..."
    - npm run build --if-present || echo "No build script found, skipping..."
    - echo "Deploying to VPS..."
    - |
      ssh -p "${SSH_PORT}" -o StrictHostKeyChecking=yes -o BatchMode=yes -T "$VPS_USER@$VPS_HOST" \
      "export PROJECT_PATH='$VPS_PROJECT_PATH' APP_NAME='api-movie-nodejs'; bash -s" << 'ENDSSH'
      set -e
      echo "=== Starting Deployment ==="
      cd "$PROJECT_PATH"

      echo "=== Update code ==="
      git fetch --all --prune
      git reset --hard origin/main

      if ! command -v npm >/dev/null 2>&1; then
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
      fi
      if command -v nvm >/dev/null 2>&1 && [ -n "$NODE_VERSION" ]; then
        nvm install "$NODE_VERSION"
        nvm use "$NODE_VERSION"
      fi
      if ! command -v npm >/dev/null 2>&1; then
        echo "npm not found. Install Node.js on the server."; exit 1
      fi
      node -v; npm -v

      echo "=== Install deps (prod) ==="
      npm i --omit=dev

      echo "=== Build (optional) ==="
      npm run build --if-present || echo "No build script"

      echo "=== Restart PM2 (fork mode) ==="
      if command -v pm2 >/dev/null 2>&1; then
        pm2 restart "$APP_NAME" --update-env || pm2 start src/server.js --name "$APP_NAME"
        pm2 save
      else
        echo "PM2 not found, please restart manually"
      fi

      echo "=== Health check ==="
      curl -fsS http://localhost:5000/ || echo "please check manually"
      echo "=== Deployment completed successfully! ==="
      ENDSSH
  only:
    - main
  environment:
    name: production
    url: https://api-movie.mizzcode.my.id
